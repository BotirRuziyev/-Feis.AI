{"version":3,"file":"element.utils-D43vSFwO.js","sources":["../../../../utils/element.utils.ts"],"sourcesContent":["import { ElNotification, FormInstance } from 'element-plus';\r\n\r\nexport const emailRule = {\r\n  validator: (rule: any, value: any) => {\r\n    if (value) {\r\n      const res = String(value)\r\n        .toLowerCase()\r\n        .match(\r\n          /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n        );\r\n\r\n      if (res) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  },\r\n  message: 'Email',\r\n  trigger: ['blur', 'change'],\r\n};\r\nexport const passMinLength = {\r\n  validator: (rule: any, value: any) => {\r\n    console.log('---passMinLength: ', value);\r\n    if (value) {\r\n      if (value.length >= 5) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  },\r\n  message: 'Длина пароля должна быть не менее 5 символов!',\r\n  trigger: ['blur', 'change'],\r\n};\r\nexport const passLength = {\r\n  validator: (rule: any, value: any) => {\r\n    console.log('---passMinLength: ', value);\r\n    if (value) {\r\n      if (value.length === 5) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  },\r\n  message: 'Длина пароля должна быть 5 цифр!!',\r\n  trigger: ['blur', 'change'],\r\n};\r\nexport const required = {\r\n  required: true,\r\n  message: 'Required field',\r\n  trigger: ['blur', 'change'],\r\n};\r\nexport const requiredMsgNull = {\r\n  required: true,\r\n  message: '',\r\n  trigger: ['blur', 'change', 'input'],\r\n};\r\n\r\nexport const faceModelImagesCount = {\r\n  validator: (rule: any, value: any) => {\r\n    if (value.length > 5) {\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n  message: 'Min image count 5',\r\n  trigger: ['blur', 'change'],\r\n};\r\n\r\nexport function resetForm(formEl: FormInstance | undefined): void {\r\n  if (!formEl) {\r\n    return;\r\n  }\r\n  formEl.resetFields();\r\n}\r\n\r\nexport async function useValidateForm(\r\n  formEl: FormInstance | undefined,\r\n): Promise<boolean> {\r\n  if (!formEl) {\r\n    return false;\r\n  }\r\n  return await formEl.validate((valid: boolean) => {\r\n    return valid;\r\n  });\r\n}\r\n\r\nexport async function useValidateFormInField(\r\n  formEl: FormInstance | undefined,\r\n  fields: Array<any>,\r\n): Promise<boolean> {\r\n  if (!formEl) {\r\n    return false;\r\n  }\r\n  // deadline\r\n  return await formEl.validateField(fields);\r\n}\r\n\r\n/** Notification **/\r\nconst OFFSET = 10;\r\nconst POSITION = 'bottom-right';\r\n\r\nexport const notification = {\r\n  success: (message = '', title = null) => {\r\n    ElNotification({\r\n      title,\r\n      message,\r\n      type: 'success',\r\n      offset: OFFSET,\r\n      position: POSITION,\r\n    });\r\n  },\r\n  warning: (message = '', title = null) => {\r\n    ElNotification({\r\n      title,\r\n      message,\r\n      type: 'warning',\r\n      offset: OFFSET,\r\n      position: POSITION,\r\n    });\r\n  },\r\n  info: (message = '', title = null) => {\r\n    ElNotification({\r\n      title,\r\n      message,\r\n      type: 'info',\r\n      offset: OFFSET,\r\n      position: POSITION,\r\n    });\r\n  },\r\n  error: (message = 'Ошибка', title = null) => {\r\n    ElNotification({\r\n      title,\r\n      message,\r\n      type: 'error',\r\n      offset: OFFSET,\r\n      position: POSITION,\r\n    });\r\n  },\r\n  created: (message = 'Добавлено', title = null) => {\r\n    ElNotification({\r\n      title,\r\n      message,\r\n      type: 'success',\r\n      offset: OFFSET,\r\n      position: POSITION,\r\n    });\r\n  },\r\n  restore: (message = 'restore', title = null) => {\r\n    ElNotification({\r\n      title,\r\n      message,\r\n      type: 'success',\r\n      offset: OFFSET,\r\n      position: POSITION,\r\n    });\r\n  },\r\n  updated: (message = 'Обновлено', title = null) => {\r\n    ElNotification({\r\n      title,\r\n      message,\r\n      type: 'success',\r\n      offset: OFFSET,\r\n      position: POSITION,\r\n    });\r\n  },\r\n  deleted: (message = 'Удалено', title = null) => {\r\n    ElNotification({\r\n      title,\r\n      message,\r\n      type: 'success',\r\n      offset: OFFSET,\r\n      position: POSITION,\r\n    });\r\n  },\r\n};\r\n"],"names":[],"mappings":";;AAEO,MAAA,YAAA;AAAA,EAAkB,WAAA,CAAA,MAAA,UAAA;AAErB,QAAA,OAAA;AACE,YAAA,MAAA,OAAA,KAAA,EAAA,YAAA,EAAA;AAAA,QAEG;AAAA,MACC;AAGJ,UAAA,KAAA;AACE,eAAA;AAAA,MAAO;AAAA,IACT;AAGF,WAAA;AAAA,EAAO;AAAA,EACT,SAAA;AAAA,EACS,SAAA,CAAA,QAAA,QAAA;AAEX;AA6BO,MAAA,WAAA;AAAA,EAAiB,UAAA;AAAA,EACZ,SAAA;AAAA,EACD,SAAA,CAAA,QAAA,QAAA;AAEX;AAOO,MAAA,uBAAA;AAAA,EAA6B,WAAA,CAAA,MAAA,UAAA;AAEhC,QAAA,MAAA,SAAA,GAAA;AACE,aAAA;AAAA,IAAO;AAET,WAAA;AAAA,EAAO;AAAA,EACT,SAAA;AAAA,EACS,SAAA,CAAA,QAAA,QAAA;AAEX;AAEO,SAAA,UAAA,QAAA;AACL,MAAA,CAAA,QAAA;AACE;AAAA,EAAA;AAEF,SAAA,YAAA;AACF;AAEA,eAAA,gBAAA,QAAA;AAGE,MAAA,CAAA,QAAA;AACE,WAAA;AAAA,EAAO;AAET,SAAA,MAAA,OAAA,SAAA,CAAA,UAAA;AACE,WAAA;AAAA,EAAO,CAAA;AAEX;AAcA,MAAA,SAAA;AACA,MAAA,WAAA;AAEO,MAAA,eAAA;AAAA,EAAqB,SAAA,CAAA,UAAA,IAAA,QAAA,SAAA;AAET,mBAAA;AAAA,MAAA;AAAA,MACb;AAAA,MACA,MAAA;AAAA,MACM,QAAA;AAAA,MACE,UAAA;AAAA,IACE,CAAA;AAAA,EACX;AAAA,EACH,SAAA,CAAA,UAAA,IAAA,QAAA,SAAA;AAEiB,mBAAA;AAAA,MAAA;AAAA,MACb;AAAA,MACA,MAAA;AAAA,MACM,QAAA;AAAA,MACE,UAAA;AAAA,IACE,CAAA;AAAA,EACX;AAAA,EACH,MAAA,CAAA,UAAA,IAAA,QAAA,SAAA;AAEiB,mBAAA;AAAA,MAAA;AAAA,MACb;AAAA,MACA,MAAA;AAAA,MACM,QAAA;AAAA,MACE,UAAA;AAAA,IACE,CAAA;AAAA,EACX;AAAA,EACH,OAAA,CAAA,UAAA,UAAA,QAAA,SAAA;AAEiB,mBAAA;AAAA,MAAA;AAAA,MACb;AAAA,MACA,MAAA;AAAA,MACM,QAAA;AAAA,MACE,UAAA;AAAA,IACE,CAAA;AAAA,EACX;AAAA,EACH,SAAA,CAAA,UAAA,aAAA,QAAA,SAAA;AAEiB,mBAAA;AAAA,MAAA;AAAA,MACb;AAAA,MACA,MAAA;AAAA,MACM,QAAA;AAAA,MACE,UAAA;AAAA,IACE,CAAA;AAAA,EACX;AAAA,EACH,SAAA,CAAA,UAAA,WAAA,QAAA,SAAA;AAEiB,mBAAA;AAAA,MAAA;AAAA,MACb;AAAA,MACA,MAAA;AAAA,MACM,QAAA;AAAA,MACE,UAAA;AAAA,IACE,CAAA;AAAA,EACX;AAAA,EACH,SAAA,CAAA,UAAA,aAAA,QAAA,SAAA;AAEiB,mBAAA;AAAA,MAAA;AAAA,MACb;AAAA,MACA,MAAA;AAAA,MACM,QAAA;AAAA,MACE,UAAA;AAAA,IACE,CAAA;AAAA,EACX;AAAA,EACH,SAAA,CAAA,UAAA,WAAA,QAAA,SAAA;AAEiB,mBAAA;AAAA,MAAA;AAAA,MACb;AAAA,MACA,MAAA;AAAA,MACM,QAAA;AAAA,MACE,UAAA;AAAA,IACE,CAAA;AAAA,EACX;AAEL;"}