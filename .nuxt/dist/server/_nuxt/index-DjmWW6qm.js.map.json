{"file":"index-DjmWW6qm.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACe,gBAAgB;AAAA,EAC7B,MAAM;AAAA,EACN,SAAS;AACP,WAAO,mBAAmB,KAAK;AAAA,EACnC;AACA,CAAC;ACDM,MAAM,mBAAmB,OAAO,IAAI,kBAAkB;AAC7D,MAAA,qBAAe,gBAAgB;AAAA,EAC7B,MAAM;AAAA,EACN,cAAc;AAAA,EACd,OAAO,CAAC,YAAY,eAAe,kBAAkB,aAAa;AAAA,EAClE,MAAM,GAAG,EAAE,OAAO,MAAK,GAAI;AACzB,UAAM,UAAU,IAAI,KAAK;AASzB,YAAQ,kBAAkB,IAAI;AAC9B,WAAO,CAAC,UAAU;;AAChB,UAAI,QAAQ,OAAO;AACjB,gBAAO,WAAM,YAAN;AAAA,MACf;AACM,YAAM,OAAO,MAAM,YAAY,MAAM;AACrC,UAAI,MAAM;AACR,eAAO,KAAM;AAAA,MACrB;AACM,YAAM,cAAc,MAAM,YAAY,MAAM,eAAe;AAC3D,YAAM,cAAc,MAAM,eAAe,MAAM,kBAAkB;AACjE,aAAO,mBAAmB,aAAa,OAAO,WAAW;AAAA,IAC1D;AAAA,EACL;AACA,CAAC;ACMD,MAAe,YAAA;AAAA,EACb,YAAY,CAAC;AAAA,EACb,MAAM,QAAQ;AACN,UAAA,UAAU,IAAa,KAAK;AAClC,UAAM,QAAQ,aAAa;AAG3B,UAAM,eAAe,IAAsB,IAAI,kBAAkB;AACjE,UAAM,aAAa,IAAgB,IAAI,YAAY;AAE7C,UAAA,UAAU,OAAO,WAAuB;AAE5C,iBAAW,QAAQ;AACnB,mBAAa,QAAQ,MAAM,YAA8B,wBAAwB,WAAW,KAAK;AAAA,IAEnG;AAEA,YAAQ,WAAW,KAAK;AAElB,UAAA,SAAS,SAAS,MAAM;AAC5B,YAAM,MAAkB,CAAC;AACzB,mBAAa,MAAM,MAAM,QAAQ,CAAC,MAAW;;AAE3C,cAAM,OAAO;AAAA,UACX,MAAI,4BAAG,SAAH,mBAAS,OAAM;AAAA,UACnB,YAAU,4BAAG,SAAH,mBAAS,aAAY;AAAA,UAC/B,iBAAe,4BAAG,SAAH,mBAAS,kBAAiB;AAAA,QAC3C;AAEE,UAAA,OAAO,QAAQ,CAAC,QAAgB;AAChC,gBAAM,MAAM;AAAA,YACV,IAAI,EAAE;AAAA,YACN,aAAa,EAAE;AAAA,YACf,QAAQ,EAAE;AAAA,YACV;AAAA,YACA;AAAA,UACF;AAEA,cAAI,KAAK,GAAG;AAAA,QAAA,CACb;AAAA,MAAA,CAEF;AACM,aAAA;AAAA,IAAA,CACR;AAEM,WAAA;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EAAA;AAEJ;;;AC9FA,QAAA,OAAAA,eAKmE,MALnE,CAAA,6FAAAC,eAAA,EAAA,SAAA,QAAA,CAAA,UAAA;AAAA,QAAAC,mBAAA,wBAAA,MAAA,CAAA,GAAA,OAAA,CAAA;;;;;;;;;;","names":["_ssrRenderAttrs","_ssrRenderStyle","_ssrRenderComponent"],"sources":["../../../../node_modules/nuxt/dist/app/components/server-placeholder.js","../../../../node_modules/nuxt/dist/app/components/client-only.js","../../../../pages/myFiles/index.vue","../../../../pages/myFiles/index.vue"],"sourcesContent":["import { createElementBlock, defineComponent } from \"vue\";\nexport default defineComponent({\n  name: \"ServerPlaceholder\",\n  render() {\n    return createElementBlock(\"div\");\n  }\n});\n","import { cloneVNode, createElementBlock, createStaticVNode, defineComponent, getCurrentInstance, h, onMounted, provide, ref } from \"vue\";\nimport { isPromise } from \"@vue/shared\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport { getFragmentHTML } from \"./utils.js\";\nimport ServerPlaceholder from \"./server-placeholder.js\";\nexport const clientOnlySymbol = Symbol.for(\"nuxt:client-only\");\nexport default defineComponent({\n  name: \"ClientOnly\",\n  inheritAttrs: false,\n  props: [\"fallback\", \"placeholder\", \"placeholderTag\", \"fallbackTag\"],\n  setup(_, { slots, attrs }) {\n    const mounted = ref(false);\n    onMounted(() => {\n      mounted.value = true;\n    });\n    if (import.meta.dev) {\n      const nuxtApp = useNuxtApp();\n      nuxtApp._isNuxtPageUsed = true;\n      nuxtApp._isNuxtLayoutUsed = true;\n    }\n    provide(clientOnlySymbol, true);\n    return (props) => {\n      if (mounted.value) {\n        return slots.default?.();\n      }\n      const slot = slots.fallback || slots.placeholder;\n      if (slot) {\n        return slot();\n      }\n      const fallbackStr = props.fallback || props.placeholder || \"\";\n      const fallbackTag = props.fallbackTag || props.placeholderTag || \"span\";\n      return createElementBlock(fallbackTag, attrs, fallbackStr);\n    };\n  }\n});\nconst cache = /* @__PURE__ */ new WeakMap();\n// @__NO_SIDE_EFFECTS__\nexport function createClientOnly(component) {\n  if (import.meta.server) {\n    return ServerPlaceholder;\n  }\n  if (cache.has(component)) {\n    return cache.get(component);\n  }\n  const clone = { ...component };\n  if (clone.render) {\n    clone.render = (ctx, cache2, $props, $setup, $data, $options) => {\n      if ($setup.mounted$ ?? ctx.mounted$) {\n        const res = component.render?.bind(ctx)(ctx, cache2, $props, $setup, $data, $options);\n        return res.children === null || typeof res.children === \"string\" ? cloneVNode(res) : h(res);\n      } else {\n        const fragment = getFragmentHTML(ctx._.vnode.el ?? null) ?? [\"<div></div>\"];\n        return createStaticVNode(fragment.join(\"\"), fragment.length);\n      }\n    };\n  } else if (clone.template) {\n    clone.template = `\n      <template v-if=\"mounted$\">${component.template}</template>\n      <template v-else><div></div></template>\n    `;\n  }\n  clone.setup = (props, ctx) => {\n    const nuxtApp = useNuxtApp();\n    const mounted$ = ref(nuxtApp.isHydrating === false);\n    const instance = getCurrentInstance();\n    if (nuxtApp.isHydrating) {\n      const attrs = { ...instance.attrs };\n      const directives = extractDirectives(instance);\n      for (const key in attrs) {\n        delete instance.attrs[key];\n      }\n      onMounted(() => {\n        Object.assign(instance.attrs, attrs);\n        instance.vnode.dirs = directives;\n      });\n    }\n    onMounted(() => {\n      mounted$.value = true;\n    });\n    const setupState = component.setup?.(props, ctx) || {};\n    if (isPromise(setupState)) {\n      return Promise.resolve(setupState).then((setupState2) => {\n        if (typeof setupState2 !== \"function\") {\n          setupState2 = setupState2 || {};\n          setupState2.mounted$ = mounted$;\n          return setupState2;\n        }\n        return (...args) => {\n          if (mounted$.value || !nuxtApp.isHydrating) {\n            const res = setupState2(...args);\n            return res.children === null || typeof res.children === \"string\" ? cloneVNode(res) : h(res);\n          } else {\n            const fragment = getFragmentHTML(instance?.vnode.el ?? null) ?? [\"<div></div>\"];\n            return createStaticVNode(fragment.join(\"\"), fragment.length);\n          }\n        };\n      });\n    } else {\n      if (typeof setupState === \"function\") {\n        return (...args) => {\n          if (mounted$.value) {\n            return h(setupState(...args), ctx.attrs);\n          }\n          const fragment = getFragmentHTML(instance?.vnode.el ?? null) ?? [\"<div></div>\"];\n          return createStaticVNode(fragment.join(\"\"), fragment.length);\n        };\n      }\n      return Object.assign(setupState, { mounted$ });\n    }\n  };\n  cache.set(component, clone);\n  return clone;\n}\nfunction extractDirectives(instance) {\n  if (!instance || !instance.vnode.dirs) {\n    return null;\n  }\n  const directives = instance.vnode.dirs;\n  instance.vnode.dirs = null;\n  return directives;\n}\n","<template>\r\n  <div >\r\n<!--    v-loading=\"loading\"-->\r\n    <h1 >Files page</h1>\r\n\r\n    <div class=\"app-base-border-radius app-base-margin-top-bottom\" style=\"width: 100%\"/>\r\n\r\n\r\n    <client-only>\r\n      <app-masonry-images :images=\"images\"/>\r\n<!--      <div class=\"grid\" id=\"mas-grid\">-->\r\n<!--        <div class=\"grid-sizer\"></div>-->\r\n<!--        <div class=\"gutter-sizer\"></div>-->\r\n<!--        <div v-for=\"item in images\" class=\"grid-item\">-->\r\n<!--          <img :src=\"item.img\"/>-->\r\n<!--          <div class=\"mItem-body-info\">-->\r\n<!--            <h1>id: {{ item.id }}</h1>-->\r\n<!--            <a :href=\"item.img\" download>Download</a>-->\r\n<!--            <span @click=\"copyPrompt(item.prompt)\">Copy prompt</span>-->\r\n<!--            <div v-if=\"item?.face?.id\">-->\r\n<!--              <img style=\"width: 40px;height: 40px;border-radius: 50%\" :src=\"item?.face?.coverImageUrl\">-->\r\n<!--              {{ item?.face?.faceName }}-->\r\n<!--            </div>-->\r\n<!--          </div>-->\r\n<!--        </div>-->\r\n<!--      </div>-->\r\n    </client-only>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { useAuthStore } from '~/composables/stores/useAuthStore';\r\nimport {apiFetchGet, useApiFetch} from '#imports';\r\nimport {ref, reactive} from 'vue';\r\nimport {SearchForm} from '~/model/search.form';\r\nimport {PaginationResult} from '~/model/pagination.result';\r\n\r\ndefinePageMeta({  });\r\n\r\nexport default {\r\n  components: {},\r\n  async setup() {\r\n    const loading = ref<boolean>(false)\r\n    const store = useAuthStore();\r\n    const runtimeConfig = useRuntimeConfig()\r\n\r\n    const searchResult = ref<PaginationResult>(new PaginationResult());\r\n    const searchForm = ref<SearchForm>(new SearchForm());\r\n\r\n    const getList = async (params: SearchForm) => {\r\n      // loading.value = true\r\n      searchForm.value = params;\r\n      searchResult.value = await apiFetchGet<PaginationResult>('/faceImageGeneration', searchForm.value);\r\n\r\n    };\r\n\r\n    getList(searchForm.value);\r\n\r\n    const images = computed(() => {\r\n      const res: Array<any> = []\r\n      searchResult.value.items.forEach((v: any) => {\r\n\r\n        const face = {\r\n          id: v?.face?.id || null,\r\n          faceName: v?.face?.faceName || null,\r\n          coverImageUrl: v?.face?.coverImageUrl || null,\r\n        }\r\n\r\n        v.images.forEach((img: string) => {\r\n          const obj = {\r\n            id: v.id,\r\n            aspectRatio: v.aspectRatio,\r\n            prompt: v.prompt,\r\n            img: img,\r\n            face: face,\r\n          }\r\n\r\n          res.push(obj)\r\n        })\r\n\r\n      })\r\n      return res\r\n    })\r\n\r\n    return {\r\n      loading,\r\n      store,\r\n      searchForm,\r\n      searchResult,\r\n      getList,\r\n      images,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n\r\n</style>\r\n","<template>\r\n  <div >\r\n<!--    v-loading=\"loading\"-->\r\n    <h1 >Files page</h1>\r\n\r\n    <div class=\"app-base-border-radius app-base-margin-top-bottom\" style=\"width: 100%\"/>\r\n\r\n\r\n    <client-only>\r\n      <app-masonry-images :images=\"images\"/>\r\n<!--      <div class=\"grid\" id=\"mas-grid\">-->\r\n<!--        <div class=\"grid-sizer\"></div>-->\r\n<!--        <div class=\"gutter-sizer\"></div>-->\r\n<!--        <div v-for=\"item in images\" class=\"grid-item\">-->\r\n<!--          <img :src=\"item.img\"/>-->\r\n<!--          <div class=\"mItem-body-info\">-->\r\n<!--            <h1>id: {{ item.id }}</h1>-->\r\n<!--            <a :href=\"item.img\" download>Download</a>-->\r\n<!--            <span @click=\"copyPrompt(item.prompt)\">Copy prompt</span>-->\r\n<!--            <div v-if=\"item?.face?.id\">-->\r\n<!--              <img style=\"width: 40px;height: 40px;border-radius: 50%\" :src=\"item?.face?.coverImageUrl\">-->\r\n<!--              {{ item?.face?.faceName }}-->\r\n<!--            </div>-->\r\n<!--          </div>-->\r\n<!--        </div>-->\r\n<!--      </div>-->\r\n    </client-only>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { useAuthStore } from '~/composables/stores/useAuthStore';\r\nimport {apiFetchGet, useApiFetch} from '#imports';\r\nimport {ref, reactive} from 'vue';\r\nimport {SearchForm} from '~/model/search.form';\r\nimport {PaginationResult} from '~/model/pagination.result';\r\n\r\ndefinePageMeta({  });\r\n\r\nexport default {\r\n  components: {},\r\n  async setup() {\r\n    const loading = ref<boolean>(false)\r\n    const store = useAuthStore();\r\n    const runtimeConfig = useRuntimeConfig()\r\n\r\n    const searchResult = ref<PaginationResult>(new PaginationResult());\r\n    const searchForm = ref<SearchForm>(new SearchForm());\r\n\r\n    const getList = async (params: SearchForm) => {\r\n      // loading.value = true\r\n      searchForm.value = params;\r\n      searchResult.value = await apiFetchGet<PaginationResult>('/faceImageGeneration', searchForm.value);\r\n\r\n    };\r\n\r\n    getList(searchForm.value);\r\n\r\n    const images = computed(() => {\r\n      const res: Array<any> = []\r\n      searchResult.value.items.forEach((v: any) => {\r\n\r\n        const face = {\r\n          id: v?.face?.id || null,\r\n          faceName: v?.face?.faceName || null,\r\n          coverImageUrl: v?.face?.coverImageUrl || null,\r\n        }\r\n\r\n        v.images.forEach((img: string) => {\r\n          const obj = {\r\n            id: v.id,\r\n            aspectRatio: v.aspectRatio,\r\n            prompt: v.prompt,\r\n            img: img,\r\n            face: face,\r\n          }\r\n\r\n          res.push(obj)\r\n        })\r\n\r\n      })\r\n      return res\r\n    })\r\n\r\n    return {\r\n      loading,\r\n      store,\r\n      searchForm,\r\n      searchResult,\r\n      getList,\r\n      images,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n\r\n</style>\r\n"],"version":3}